select(PRICE) %>%
ggplot(data = ., aes(x=PRICE)) +
geom_histogram()
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
filter(QUALIFIED == 'Q') %>%
select(PRICE) %>%
ggplot(data = ., aes(x=PRICE)) +
geom_histogram(bins = 60)
residential_clean_df %>%
filter(QUALIFIED == 'Q') %>%
select(PRICE) %>%
summary()
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
filter(QUALIFIED == 'Q', PRICE < 22000000) %>%
select(PRICE) %>%
ggplot(data = ., aes(x=PRICE)) +
geom_histogram(bins = 60)
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
filter(QUALIFIED == 'Q', PRICE < 1000000) %>%
select(PRICE) %>%
ggplot(data = ., aes(x=PRICE)) +
geom_histogram(bins = 60)
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
filter(QUALIFIED == 'Q', PRICE < 3000000) %>%
select(PRICE) %>%
ggplot(data = ., aes(x=PRICE)) +
geom_histogram(bins = 60)
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
filter(QUALIFIED == 'Q') %>%
select(PRICE) %>%
ggplot(data = ., aes(x=PRICE)) +
geom_histogram(bins = 60)
install.packages("GGally")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(tibble)
library(dplyr)
library(tidyr)
library(lubridate)
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
select(-c(SSL)) %>%
ggpairs(data = .)
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
select(-c(SSL)) %>%
ggpairs(data = ., cardinality_threshold = 20)
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
select(-c(SSL)) %>%
ggpairs(data = ., cardinality_threshold = 30)
knitr::opts_chunk$set(echo = TRUE)
summary(residential_clean_df)
install.packages("tinytex")
knitr::opts_chunk$set(echo = TRUE)
library(readr) # reading csv file
library(ggplot2) # plotting
library(tibble) # enhanced dataframe
library(dplyr) # data manipulation
library(tidyr) # tidying the data
library(lubridate)# date manipulation
library(docstring) # document function
library(Hmisc) # correlations
library(corrplot) # plotting correlations.
library(caret)
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
Filter(f = is.factor) %>%
names
knitr::opts_chunk$set(echo = TRUE)
library(readr) # reading csv file
library(ggplot2) # plotting
library(tibble) # enhanced dataframe
library(dplyr) # data manipulation
library(tidyr) # tidying the data
library(lubridate)# date manipulation
library(docstring) # document function
library(Hmisc) # correlations
library(corrplot) # plotting correlations.
library(caret)
draw_bar_graph <- function(col_name, graph_title, xlabel){
#' Draw horizontal bar chart for col_name in descending order of frequency.
col_name_en <- enquo(col_name)
residential_clean_df %>%
select(!!col_name_en) %>%
group_by(!!col_name_en) %>%
summarise(ftr_count = n()) %>%
arrange(desc(ftr_count)) %>%
ggplot( data = ., aes(x = reorder(!!col_name_en,ftr_count), y = ftr_count)) +
geom_bar(stat = 'identity') +
coord_flip()+
labs(title = graph_title) +
ylab('Residence count') +
xlab(xlabel)
}
draw_boxplot_graph <- function(col_name, col_name_d, graph_title, excl_list){
#' draw boxplot for each categories in col_name_d by PRICE
col_name <- enquo(col_name)
excl_list <- enquo(excl_list)
col_name_d1 <- enquo(col_name_d)
residential_clean_df %>%
filter(!(!!col_name %in% !!excl_list) ) %>%
select(!! col_name_d1, PRICE) %>%
ggplot(data = ., aes(x = get(col_name_d), y=PRICE^0.5)) +
geom_boxplot() +
coord_flip() +
labs(title = graph_title) +
xlab(col_name_d)
}
residential_raw_df <- read_csv('Data/Computer_Assisted_Mass_Appraisal__Residential.csv')
summary(residential_raw_df)
residential_clean_df <- residential_raw_df %>%
subset( select = -c(SSL, GIS_LAST_MOD_DTTM))
table(residential_clean_df$HEAT_D, residential_clean_df$HEAT)
#Let's draw bar graph
draw_bar_graph(HEAT_D, 'Residences by heating type','Heating Type')
condition <- c(1,7,8,13)
draw_boxplot_graph(HEAT, 'HEAT_D','graph_tile',condition)
residential_clean_df %>%
filter(is.na(HEAT_D))
# most of the columns on these 112 are NA. Let's drop these rows.
residential_clean_df <- residential_clean_df %>%
filter(!is.na(HEAT_D))
residential_clean_df <- residential_clean_df %>%
mutate(heat_coding = case_when(HEAT == 13 ~ 'ht_hot_water_rad',
HEAT == 1 ~ 'ht_forced_air',
HEAT == 7 ~ 'ht_warm_cool',
HEAT == 8 ~ 'ht_ht_pump',
TRUE ~ 'ht_other')) %>%
mutate(heat_coding = as.factor(heat_coding))
table(residential_clean_df$ROOF_D, residential_clean_df$ROOF)
#Let's draw bar graph
draw_bar_graph(ROOF_D, 'Residences by roof type','Roof Type')
condition <- c(1,2,6,11)
draw_boxplot_graph(ROOF, 'ROOF_D','Distribution of roof type by price',condition)
residential_clean_df <- residential_clean_df %>%
mutate(roof_coding = case_when(ROOF == 1 ~ 'rf_comp_shingle',
ROOF == 2 ~ 'rf_built_up',
ROOF == 6 ~ 'rf_metal_sms',
ROOF == 11 ~ 'rf_slate',
ROOF %in% c(10,15,13) ~ 'rf_other_high',
TRUE ~ 'rf_other')) %>%
mutate(roof_coding = as.factor(roof_coding))
table(residential_clean_df$STYLE_D, residential_clean_df$STYLE)
#Let's draw bar graph
draw_bar_graph(STYLE_D, 'Residences by Style','Style')
exclusion_lst <- c(4,7,6,1)
draw_boxplot_graph(STYLE, 'STYLE_D','Distribution of Price by style',exclusion_lst)
residential_clean_df <- residential_clean_df %>%
mutate(style_coding = case_when(STYLE == 4 ~ 'stl_2_story',
STYLE == 7 ~ 'stl_3_story',
STYLE == 6 ~ 'stl_2_h_story',
STYLE == 1 ~ 'stl_1_story',
STYLE %in% c(10,8,9) ~ 'stl_other_high',
TRUE ~ 'stl_other')) %>%
mutate(style_coding = as.factor(style_coding))
table(residential_clean_df$STRUCT_D, residential_clean_df$STRUCT)
#Let's draw bar graph
draw_bar_graph(STRUCT_D, 'Residences by Structure','Structure')
exclusion_lst <- c(7,1,8,6,2)
draw_boxplot_graph(STRUCT, 'STRUCT_D','Distribution of Price by Structure',exclusion_lst)
residential_clean_df <- residential_clean_df %>%
mutate(structure_coding = case_when(STRUCT == 7 ~ 'str_row_inside',
STRUCT == 1 ~ 'str_single',
STRUCT == 8 ~ 'str_semi_detached',
STRUCT == 6 ~ 'str_row_end',
STRUCT == 2 ~ 'str_multi',
TRUE ~ 'stl_other')) %>%
mutate(structure_coding = as.factor(structure_coding))
table(residential_clean_df$GRADE_D, residential_clean_df$GRADE)
#Let's draw bar graph
draw_bar_graph(GRADE_D, 'Residences by Grade','Grade')
exclusion_lst <- c(3,4,6,7)
draw_boxplot_graph(GRADE, 'GRADE_D','Distribution of Price by grade',exclusion_lst)
residential_clean_df <- residential_clean_df %>%
mutate(grade_coding = case_when(GRADE == 3 ~ 'grade_average',
GRADE == 4 ~ 'grade_above_average',
GRADE == 6 ~ 'grade_very_good',
GRADE == 7 ~ 'grade_excellent',
GRADE %in% c(10,11,12) ~ 'grade_other_high',
TRUE ~ 'grade_other')) %>%
mutate(grade_coding = as.factor(grade_coding))
table(residential_clean_df$CNDTN_D, residential_clean_df$CNDTN)
residential_clean_df <- residential_clean_df %>%
mutate(condition_coding = as.numeric(CNDTN))
table(residential_clean_df$INTWALL_D, residential_clean_df$INTWALL)
#Let's draw bar graph
draw_bar_graph(INTWALL_D, 'Residences by internal wall','Internal Wall')
exclusion_lst <- c(2,3,6,11)
draw_boxplot_graph(INTWALL, 'INTWALL_D','Distribution of Price by internal wall',exclusion_lst)
residential_clean_df <- residential_clean_df %>%
mutate(intwall_coding = case_when(EXTWALL == 2 ~ 'intwall_carpet',
EXTWALL == 3 ~ 'intwall_wood_floor',
EXTWALL == 6 ~ 'intwall_hard_wood',
EXTWALL == 11 ~ 'intwall_carpet_hardwood',
TRUE ~ 'intwall_other')) %>%
mutate(intwall_coding = as.factor(intwall_coding))
table(residential_clean_df$EXTWALL_D, residential_clean_df$EXTWALL)
#Let's draw bar graph
draw_bar_graph(EXTWALL_D, 'Residences by external wall','External Wall')
exclusion_lst <- c(4,6,14,22)
draw_boxplot_graph(EXTWALL, 'EXTWALL_D','Distribution of Price by external wall',exclusion_lst)
residential_clean_df <- residential_clean_df %>%
mutate(etxwall_coding = case_when(EXTWALL == 4 ~ 'extwall_vinyl_siding',
EXTWALL == 6 ~ 'extwall_siding',
EXTWALL == 14 ~ 'extwall_common_brick',
EXTWALL == 22 ~ 'extwall_brick_siding',
TRUE ~ 'extwall_other')) %>%
mutate(etxwall_coding = as.factor(etxwall_coding))
residential_clean_df <- residential_clean_df %>%
mutate(AC = if_else(AC == '0', 'N',AC))
# code N to 0 and Y to 1.
residential_clean_df <- residential_clean_df %>%
mutate(ac_coding = as.numeric(if_else(AC == 'N', '0','1')))
# 0 is vacant and 1 is non vacant
residential_clean_df <- residential_clean_df %>%
mutate(LAND_USE = case_when(USECODE <= 19 ~ 0,
USECODE > 19 ~ 1)) %>%
mutate(LAND_USE = as.factor(LAND_USE)) %>%
select(-USECODE)
residential_clean_df <- residential_clean_df %>%
select(-BLDG_NUM, -AC, -EXTWALL, -EXTWALL_D, -INTWALL, -INTWALL_D, -GRADE, -GRADE_D, -CNDTN, -CNDTN_D, -HEAT, -HEAT_D, -STYLE, -STYLE_D, -STRUCT, -STRUCT_D, -ROOF, -ROOF_D)
residential_clean_df <- residential_clean_df %>%
mutate(BATHROOM_TOTAL = BATHRM + 0.5*HF_BATHRM)
summary(residential_clean_df$BATHROOM_TOTAL)
residential_clean_df %>%
filter(is.na(BATHROOM_TOTAL))
residential_clean_df[residential_clean_df['OBJECTID'] == 11154,'BATHROOM_TOTAL'] = 5
residential_clean_df <- residential_clean_df %>%
filter(!is.na(BATHROOM_TOTAL))
residential_clean_df <- residential_clean_df %>%
select(-BATHRM, -HF_BATHRM)
residential_clean_df %>%
select('ROOMS','BEDRM','KITCHENS','FIREPLACES','BATHROOM_TOTAL') %>%
summary()
# Let's draw boxplots to check the data distributions.
residential_clean_df %>%
select('ROOMS','BEDRM','KITCHENS','FIREPLACES','BATHROOM_TOTAL') %>%
gather(key = 'room_type', value = 'room_count') %>%
ggplot(data = ., aes(x=room_type, y = room_count )) +
geom_boxplot()
residential_clean_df[residential_clean_df['ROOMS'] == 101,]
residential_clean_df[residential_clean_df$OBJECTID == 63895,]['ROOMS'] = 10
residential_clean_df[residential_clean_df$BEDRM > 20,]
# extract sale year. 1900 is coded for not sold residences. mutating these records to 2018 to predict the sale for current year
residential_clean_df <- residential_clean_df %>%
mutate(sale_year =  if_else(year(residential_clean_df$SALEDATE)==1900,2018,
year(residential_clean_df$SALEDATE)))
# to check if the remodelling is done and ppulate the variable. Some of the remodelling happened after the sale date.We need to check if the remodelling happened before sale date to populare remodelled flag.
residential_clean_df <- residential_clean_df %>%
mutate(yr_remod_mod = if_else(is.na(YR_RMDL),2018,as.numeric(YR_RMDL))) %>%
mutate(remodelled = as.factor(if_else(yr_remod_mod < sale_year,1,0))) %>%
select(-yr_remod_mod)
# calculate age variable which is as of sale year.
residential_clean_df <- residential_clean_df %>%
mutate(age = pmin(if_else(sale_year - AYB <0, 999,  sale_year - AYB ),
if_else(sale_year - EYB <0, 999,  sale_year - EYB ),
if_else(sale_year - YR_RMDL <0, 999,  sale_year - YR_RMDL ),
na.rm=TRUE))
# excluding the date columns
residential_clean_df <- residential_clean_df %>%
select(-AYB, -EYB, -YR_RMDL, -SALEDATE)
residential_clean_df %>%
select(GBA,LANDAREA) %>%
gather(key = 'type', value = 'area') %>%
ggplot(data = ., aes(x = type, y = area)) +
geom_boxplot()
#below are some extreme values from area perspective. However they seems valid numbers
residential_clean_df[residential_clean_df$GBA > 40000,]
residential_clean_df[residential_clean_df$LANDAREA > 500000,]
residential_clean_df <- residential_clean_df %>%
mutate(GBA_Bucket = case_when(GBA <= quantile(GBA,probs=c(0.25)) ~ 0,
GBA <= median(GBA, na.rm = TRUE) ~1,
GBA <= quantile(GBA,probs=c(0.75)) ~ 2,
GBA <= quantile(GBA,probs=c(0.90)) ~ 3,
GBA > quantile(GBA,probs=c(0.90)) ~ 4)) %>%
mutate(LANDAREA_Bucket = case_when(LANDAREA <= quantile(LANDAREA,probs=c(0.25)) ~ 0,
LANDAREA <= median(LANDAREA, na.rm = TRUE) ~1,
LANDAREA <= quantile(LANDAREA,probs=c(0.75)) ~ 2,
LANDAREA <= quantile(LANDAREA,probs=c(0.90)) ~ 3,
LANDAREA > quantile(LANDAREA,probs=c(0.90)) ~ 4))
# remove LAND_AREA and GBA
residential_clean_df <- residential_clean_df %>%
select(-c(LANDAREA, GBA, SALE_NUM))
summary(residential_clean_df)
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
drop_na(-PRICE)
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df <- residential_clean_df %>%
drop_na(-PRICE)
factorresidential_clean_df %>%
Filter(f = is.factor) %>%
names
knitr::opts_chunk$set(echo = TRUE)
residential_clean_df %>%
Filter(f = is.factor) %>%
names
knitr::opts_chunk$set(echo = TRUE)
factor_columns <- residential_clean_df %>%
Filter(f = is.factor) %>%
names
knitr::opts_chunk$set(echo = TRUE)
dummyVars('~.', data = residential_clean_df, fullRank = TRUE)
knitr::opts_chunk$set(echo = TRUE)
dv <- dummyVars('~.', data = residential_clean_df, fullRank = TRUE)
knitr::opts_chunk$set(echo = TRUE)
data.frame(predict(dv, newdata = residential_clean_df))
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df <- data.frame(predict(dv, newdata = residential_clean_df))
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df %>%
select(-OBJECTID, -PRICE, -QUALIFIED) %>%
rcorr()
View(res_dummy_df)
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df %>%
select(-OBJECTID, -PRICE, -QUALIFIEDU) %>%
rcorr()
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df %>%
select(-OBJECTID, -PRICE, -QUALIFIEDU) %>%
as.matrix() %>%
rcorr()
knitr::opts_chunk$set(echo = TRUE)
rcorr_matrix <- res_dummy_df %>%
select(-OBJECTID, -PRICE, -QUALIFIEDU) %>%
as.matrix() %>%
rcorr()
corrplot(rcorr_matrix$r, type='upper', order = 'hclust',tl.cex = 0.6,tl.srt = 70)
rcorr_matrix$r
knitr::opts_chunk$set(echo = TRUE)
as.tibble(rcorr_matrix$r)
knitr::opts_chunk$set(echo = TRUE)
as.data.frame(rcorr_matrix$r)
knitr::opts_chunk$set(echo = TRUE)
as.data.frame(rcorr_matrix$r) %>% rownames_to_column()
knitr::opts_chunk$set(echo = TRUE)
as.data.frame(rcorr_matrix$r) %>% rownames_to_column(feat1)
?rownames_to_column
knitr::opts_chunk$set(echo = TRUE)
as.data.frame(rcorr_matrix$r) %>% rownames_to_column(var = 'feat1')
knitr::opts_chunk$set(echo = TRUE)
as.data.frame(rcorr_matrix$r) %>%
rownames_to_column(var = 'feat1') %>%
gather(key = 'feat2', value = 'corr')
?gather
knitr::opts_chunk$set(echo = TRUE)
as.data.frame(rcorr_matrix$r) %>%
rownames_to_column(var = 'feat1') %>%
gather(key = 'feat2', value = 'corr', -feat1)
knitr::opts_chunk$set(echo = TRUE)
as.data.frame(rcorr_matrix$r) %>%
rownames_to_column(var = 'feat1') %>%
gather(key = 'feat2', value = 'corr', -feat1) %>%
filter(abs(corr) >= 0.8)
knitr::opts_chunk$set(echo = TRUE)
as.data.frame(rcorr_matrix$r) %>%
rownames_to_column(var = 'feat1') %>%
gather(key = 'feat2', value = 'corr', -feat1) %>%
filter(abs(corr) >= 0.8, feat1 != feat2)
knitr::opts_chunk$set(echo = TRUE)
as.data.frame(rcorr_matrix$r) %>%
rownames_to_column(var = 'feat1') %>%
gather(key = 'feat2', value = 'corr', -feat1) %>%
filter(abs(corr) >= 0.7, feat1 != feat2)
knitr::opts_chunk$set(echo = TRUE)
high_corr <- as.data.frame(rcorr_matrix$r) %>%
rownames_to_column(var = 'feat1') %>%
gather(key = 'feat2', value = 'corr', -feat1) %>%
filter(abs(corr) >= 0.7, feat1 != feat2)
knitr::opts_chunk$set(echo = TRUE)
as.data.frame(rcorr_matrix$P) %>%
rownames_to_column(var = 'feat1') %>%
gather(key = 'feat2', value = 'P_value', -feat1) %>%
filter(feat1 != feat2)
knitr::opts_chunk$set(echo = TRUE)
high_corr %>%
left_join(P_value)
knitr::opts_chunk$set(echo = TRUE)
high_corr_df <- as.data.frame(rcorr_matrix$r) %>%
rownames_to_column(var = 'feat1') %>%
gather(key = 'feat2', value = 'corr', -feat1) %>%
filter(abs(corr) >= 0.7, feat1 != feat2)
p_value_df <- as.data.frame(rcorr_matrix$P) %>%
rownames_to_column(var = 'feat1') %>%
gather(key = 'feat2', value = 'p', -feat1) %>%
filter(feat1 != feat2)
knitr::opts_chunk$set(echo = TRUE)
high_corr_df %>%
left_join(p_value_df)
knitr::opts_chunk$set(echo = TRUE)
high_corr_df %>%
left_join(p_value_df) %>%
arrange(feat1, feat2)
knitr::opts_chunk$set(echo = TRUE)
multi_colinearity <- high_corr_df %>%
left_join(p_value_df) %>%
arrange(feat1, feat2)
knitr::opts_chunk$set(echo = TRUE)
unique(multi_colinearity$feat1)
knitr::opts_chunk$set(echo = TRUE)
unique(multi_colinearity$feat2)
knitr::opts_chunk$set(echo = TRUE)
multicol_feature <- unique(multi_colinearity$feat1)
multicol_feature
knitr::opts_chunk$set(echo = TRUE)
rcorr_matrix_2 <- res_dummy_df %>%
select(!!multicol_feature, PRICE) %>%
as.matrix() %>%
rcorr()
corrplot(rcorr_matrix_2$r, type='upper', order = 'hclust',tl.cex = 0.6,tl.srt = 70)
multi_colinearity
knitr::opts_chunk$set(echo = TRUE)
corrplot(rcorr_matrix$r, type='upper', order = 'hclust',tl.cex = 0.5)
knitr::opts_chunk$set(echo = TRUE)
corrplot(rcorr_matrix$r, type='upper', order = 'hclust',tl.cex = 0.5)
knitr::opts_chunk$set(echo = TRUE)
corrplot(rcorr_matrix$r, type='upper', order = 'hclust',tl.cex = 1)
knitr::opts_chunk$set(echo = TRUE)
corrplot(rcorr_matrix$r, type='upper', order = 'hclust',tl.cex = 0.8)
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df %>%
select(-etxwall_coding.extwall_siding, -intwall_coding.intwall_other, -KITCHENS, -structure_coding.str_single)
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df <- res_dummy_df %>%
select(-etxwall_coding.extwall_siding, -intwall_coding.intwall_other, -KITCHENS, -structure_coding.str_single)
knitr::opts_chunk$set(echo = TRUE)
nearZeroVar(res_dummy_df)
?nearZeroVar
knitr::opts_chunk$set(echo = TRUE)
nearZeroVar(res_dummy_df, names = TRUE)
summary(res_dummy_df$PRICE)
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df %>%
select(-PRICE,-QUALIFIEDU) %>%
nearZeroVar(names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
nzv_cols <- res_dummy_df %>%
select(-PRICE,-QUALIFIEDU) %>%
nearZeroVar(names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df %>%
select(-!!nzv_cols)
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df %>%
select(-!!nzv_cols) %>%
dim()
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df <- res_dummy_df %>%
select(-!!nzv_cols)
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df %>%
filter(QUALIFIEDU == 1)
knitr::opts_chunk$set(echo = TRUE)
res_dummy_df %>%
filter(QUALIFIEDU == 0)
knitr::opts_chunk$set(echo = TRUE)
res_data_modelling <- res_dummy_df %>%
filter(QUALIFIEDU == 0)
knitr::opts_chunk$set(echo = TRUE)
rf1 <- randomForest(PRICE~., data = train_residence_df, ntree=2)
library(readr) # reading csv file
library(ggplot2) # plotting
library(tibble) # enhanced dataframe
library(dplyr) # data manipulation
library(tidyr) # tidying the data
library(lubridate)# date manipulation
library(docstring) # document function
library(Hmisc) # correlations
library(corrplot) # plotting correlations.
library(caret)
library(e1071)
library(randomForest)
library(import)
set.seed(12309)
res_data_modelling <- res_dummy_df %>%
filter(QUALIFIEDU == 0, !is.na(PRICE))
trainIndex = createDataPartition(res_data_modelling$PRICE, p=0.8, list=FALSE)
train_residence_df <- res_data_modelling[trainIndex, ]
test_residence_df <-  res_data_modelling[-trainIndex, ]
train_obj <- train_residence_df %>% select(OBJECTID)
train_residence_df <- train_residence_df %>% select(-OBJECTID,-QUALIFIEDU)
test_obj <- test_residence_df %>% select(OBJECTID)
test_residence_df <- test_residence_df %>% select(-OBJECTID, -QUALIFIEDU)
rf1 <- randomForest(PRICE~., data = train_residence_df, ntree=2)
summary(rf1)
pred_rf <- predict(rf1, test_residence_df)
postResample(pred = pred_rf, obs = test_residence_df$PRICE)
knitr::opts_chunk$set(echo = TRUE)
rf1 <- randomForest(PRICE~., data = train_residence_df, ntree=10)
summary(rf1)
pred_rf <- predict(rf1, test_residence_df)
postResample(pred = pred_rf, obs = test_residence_df$PRICE)
knitr::opts_chunk$set(echo = TRUE)
rf1 <- randomForest(PRICE~., data = train_residence_df, ntree=20)
summary(rf1)
pred_rf <- predict(rf1, test_residence_df)
postResample(pred = pred_rf, obs = test_residence_df$PRICE)
knitr::opts_chunk$set(echo = TRUE)
set.seed(90898)
rf1 <- randomForest(PRICE~., data = train_residence_df, ntree=30)
summary(rf1)
pred_rf <- predict(rf1, test_residence_df)
postResample(pred = pred_rf, obs = test_residence_df$PRICE)
